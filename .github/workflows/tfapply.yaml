name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      dry-run:
        type: boolean
        default: false
        description: "Dry run (skip deployment)"

permissions:
  contents: read
  id-token: write # Required for aws-credentials setup

# variables for terraform
env:
  TF_VAR_aws_account_id: ${{ secrets.AWS_ACCOUNT_ID }}
  TF_VAR_aws_terraform_role: ${{ secrets.AWS_TERRAFORM_ROLE }}
  TF_VAR_ssh_private_key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
  TF_VAR_ssh_public_key: ${{ secrets.EC2_SSH_PUBLIC_KEY }}
  TF_VAR_ansible_user_password: ${{ secrets.ANSIBLE_USER_PASS }}
  # https://developer.hashicorp.com/terraform/language/backend/s3#credentials-and-shared-configuration
  AWS_REGION: ${{ secrets.AWS_REGION }}
  # https://developer.hashicorp.com/terraform/language/backend/s3#assume-role-with-web-identity-configuration
  AWS_ROLE_ARN: "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_TERRAFORM_ROLE }}"

jobs:
  tf-plan:
    name: Lint and plan
    runs-on: ubuntu-latest
    outputs:
      tf-plan-exit-code: ${{ steps.tf-plan.outputs.exitcode }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      
      - name: Configure AWS creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_TERRAFORM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.1"

      - name: Terraform Init
        run: terraform init -lockfile=readonly
  
      - name: Terraform Validate
        run: terraform validate
  
      - name: Terraform Format
        run: terraform fmt -check -recursive

      - uses: terraform-linters/setup-tflint@v4
        name: Setup TFLint
        with:
          tflint_version: "v0.54.0"
  
      - name: Init TFLint
        run: tflint --init
        env:
          # https://github.com/terraform-linters/tflint/blob/master/docs/user-guide/plugins.md#avoiding-rate-limiting
          GITHUB_TOKEN: ${{ github.token }}
  
      - name: Run TFLint
        id: lint
        run: tflint -f compact

      - name: Check lint output
        run: echo "Skipping evaluation of lint output"

      - name: Terraform Plan
        id: tf-plan
        run: |
          export exitcode=0
          terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?
  
          echo "exitcode=${exitcode}" >> $GITHUB_OUTPUT
          
          if [ $exitcode -eq 1 ]; then
            echo Terraform Plan Failed!
            exit 1
          else 
            exit 0
          fi

      - name: Publish Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan

      - name: Create Plan summary
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tfplan)
          delimiter="$(openssl rand -hex 8)"

          echo "summary<<${delimiter}" >> $GITHUB_STEP_SUMMARY
          echo "## Terraform Plan Output" >> $GITHUB_STEP_SUMMARY
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo '```terraform' >> $GITHUB_STEP_SUMMARY
          echo "$TERRAFORM_PLAN" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "</details>" >> $GITHUB_STEP_SUMMARY
          echo "${delimiter}" >> $GITHUB_STEP_SUMMARY

  tf-apply:
    name: Apply plan
    runs-on: ubuntu-latest
    needs: tf-plan
    if: inputs.dry-run == false
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_TERRAFORM_ROLE }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.1"
        
    - name: Terraform Init
      run: terraform init -lockfile=readonly
    
    - name: Create key file and vault password file
      run: |
        echo "$TF_VAR_ssh_private_key" > ansible/ansible.pem
        echo "${{ secrets.ANSIBLE_VAULT_PASS }}" > ansible/.vault_pass
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
        
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan/tfplan
    
    - name: Clean
      run: rm ansible/ansible.pem ansible/.vault_pass